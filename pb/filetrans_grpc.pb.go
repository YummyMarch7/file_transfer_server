// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: filetrans.proto

package file_transfer_server_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileTransClient is the client API for FileTrans service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileTransClient interface {
	DirList(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Item, error)
	FileDownload(ctx context.Context, in *Item, opts ...grpc.CallOption) (FileTrans_FileDownloadClient, error)
}

type fileTransClient struct {
	cc grpc.ClientConnInterface
}

func NewFileTransClient(cc grpc.ClientConnInterface) FileTransClient {
	return &fileTransClient{cc}
}

func (c *fileTransClient) DirList(ctx context.Context, in *Path, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/file_trans.file.FileTrans/DirList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileTransClient) FileDownload(ctx context.Context, in *Item, opts ...grpc.CallOption) (FileTrans_FileDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileTrans_ServiceDesc.Streams[0], "/file_trans.file.FileTrans/FileDownload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileTransFileDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileTrans_FileDownloadClient interface {
	Recv() (*FileBlockRespond, error)
	grpc.ClientStream
}

type fileTransFileDownloadClient struct {
	grpc.ClientStream
}

func (x *fileTransFileDownloadClient) Recv() (*FileBlockRespond, error) {
	m := new(FileBlockRespond)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileTransServer is the server API for FileTrans service.
// All implementations must embed UnimplementedFileTransServer
// for forward compatibility
type FileTransServer interface {
	DirList(context.Context, *Path) (*Item, error)
	FileDownload(*Item, FileTrans_FileDownloadServer) error
	mustEmbedUnimplementedFileTransServer()
}

// UnimplementedFileTransServer must be embedded to have forward compatible implementations.
type UnimplementedFileTransServer struct {
}

func (UnimplementedFileTransServer) DirList(context.Context, *Path) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirList not implemented")
}
func (UnimplementedFileTransServer) FileDownload(*Item, FileTrans_FileDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}
func (UnimplementedFileTransServer) mustEmbedUnimplementedFileTransServer() {}

// UnsafeFileTransServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileTransServer will
// result in compilation errors.
type UnsafeFileTransServer interface {
	mustEmbedUnimplementedFileTransServer()
}

func RegisterFileTransServer(s grpc.ServiceRegistrar, srv FileTransServer) {
	s.RegisterService(&FileTrans_ServiceDesc, srv)
}

func _FileTrans_DirList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileTransServer).DirList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_trans.file.FileTrans/DirList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileTransServer).DirList(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileTrans_FileDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Item)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileTransServer).FileDownload(m, &fileTransFileDownloadServer{stream})
}

type FileTrans_FileDownloadServer interface {
	Send(*FileBlockRespond) error
	grpc.ServerStream
}

type fileTransFileDownloadServer struct {
	grpc.ServerStream
}

func (x *fileTransFileDownloadServer) Send(m *FileBlockRespond) error {
	return x.ServerStream.SendMsg(m)
}

// FileTrans_ServiceDesc is the grpc.ServiceDesc for FileTrans service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileTrans_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_trans.file.FileTrans",
	HandlerType: (*FileTransServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DirList",
			Handler:    _FileTrans_DirList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileDownload",
			Handler:       _FileTrans_FileDownload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "filetrans.proto",
}
